{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Analyzing Gaming Addiction Trends and Player Engagement\"\n",
        "#subtitle: \"Spring 2025\"\n",
        "author: \"Bijay Adhikari\"\n",
        "bibliography: references.bib\n",
        "nocite: |\n",
        "  @*\n",
        "number-sections: false\n",
        "format:\n",
        "  html:\n",
        "    theme: default\n",
        "    rendering: embed-resources\n",
        "    code-fold: true\n",
        "    code-tools: true\n",
        "    toc: true\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "![Source: iStockPhoto](https://media.istockphoto.com/id/1132282499/photo/woman-playing-video-games.jpg?s=612x612&w=0&k=20&c=ljeQB2UiYW6fYNjAZONaCcdH1r7GPPE7SvXzQ5YJPMk=){fig-alt=\"A picture of a person indulged in video game.\"}\n",
        "\n",
        "\n",
        "Have you ever found yourself so immersed in a video game that hours passed without you even noticing? For me, it was the Grand Theft Auto series. After school, I would sit down to play and quickly become absorbed in its open virtual world, filled with action, rich stories, and endless possibilities. It was my version of freedom. I could cruise through cities, outrun the police, complete missions, and later laugh about it with friends. Video games were fun, simple, and a great way to relax.\n",
        "\n",
        "Today, the gaming industry has transformed massively. Video games are more immersive, cinematic, and competitive than ever. Streamers and esports players are treated like celebrities, with huge fan bases following everything they do. Video games are no longer just a form of entertainment. They have become a way to express yourself, get inspired, and even explore future career options.\n",
        "With that rise comes a darker flip side, which is gaming addiction. As fun and exciting as games can be, excessive play can negatively impact mental health, productivity, and real-world relationships. Studies show that around 3-4% of gamers exhibit symptoms of gaming disorder, leading to anxiety, social withdrawal, and even depression in some cases. \n",
        "\n",
        "This blog takes a closer look at where we stand today when it comes to gaming addiction. By using real-time data from the Steam library, one of the world’s largest gaming platforms, this project explores how often people play, what types of games they spend the most time on, and what patterns might point to addictive behavior.\n",
        "\n",
        "\n",
        "## Data Sources\n",
        "\n",
        "For this project, Steam was selected as the primary source of gaming data due to its large user base, extensive game catalog, and publicly accessible API. Two main datasets were extracted using the Steam Web API specifically using the **ISteamApps/GetAppList** and **IPlayerService/GetOwnedGames** endpoints:  \n",
        "\n",
        "- **`steam_game_data.csv`** : This dataset contains detailed information about 91,690 games, including metadata such as the game title, developer, publisher, genre, release date, supported platforms, multiplayer support, graphics quality, story depth, and metrics like review scores and player engagement statistics.  \n",
        "\n",
        "- **`user_playtime_data.csv`** : This dataset consists of 66,187 player-specific data, capturing metrics like total playtime, recent playtime, and game ownership information. Each user (`user_id`) can have multiple games (`game_id`) associated with their account.  \n",
        "\n",
        "\n",
        "::: {.cell .code-fold=\"true\" .code-summary=\"View user data collection script\"}"
      ],
      "id": "1fd780af"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import time\n",
        "import random\n",
        "from requests.adapters import HTTPAdapter\n",
        "from requests.packages.urllib3.util.retry import Retry\n",
        "\n",
        "# Generate random Steam User IDs (these are not guaranteed to be valid)\n",
        "def generate_random_steam_ids(n=50000):\n",
        "    # SteamID64 range (valid SteamID64 values generally start from 76561197960265728)\n",
        "    base_id = 76561197960265728\n",
        "    return [str(base_id + random.randint(0, 1000000000)) for _ in range(n)]\n",
        "\n",
        "# columns for the output CSV\n",
        "columns = ['user_id', 'game_count', 'appid', 'name', 'playtime_forever', 'playtime_2weeks']\n",
        "\n",
        "# Generate 50,000 random Steam User IDs\n",
        "user_ids = generate_random_steam_ids()\n",
        "\n",
        "\n",
        "session = requests.Session()\n",
        "retry = Retry(connect=5, backoff_factor=1, status_forcelist=[502, 503, 504])\n",
        "adapter = HTTPAdapter(max_retries=retry)\n",
        "session.mount('http://', adapter)\n",
        "\n",
        "\n",
        "API_KEY = 'API_KEY' # removing this for privacy\n",
        "\n",
        "# Store user game data\n",
        "all_user_data = []\n",
        "\n",
        "# Fetch data for each random user\n",
        "for idx, user_id in enumerate(user_ids):\n",
        "    try:\n",
        "        url = f'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key={API_KEY}&steamid={user_id}&include_appinfo=true&include_played_free_games=true'\n",
        "        response = session.get(url, timeout=10)\n",
        "        response.raise_for_status()\n",
        "        data = response.json()\n",
        "        \n",
        "        if 'response' in data and 'games' in data['response']:\n",
        "            games = data['response']['games']\n",
        "            game_count = data['response'].get('game_count', 0)\n",
        "            for game in games:\n",
        "                game_data = {\n",
        "                    'user_id': user_id,\n",
        "                    'game_count': game_count,\n",
        "                    'appid': game.get('appid'),\n",
        "                    'name': game.get('name', 'Unknown'),\n",
        "                    'playtime_forever': game.get('playtime_forever', 0),\n",
        "                    'playtime_2weeks': game.get('playtime_2weeks', 0)\n",
        "                }\n",
        "                all_user_data.append(game_data)\n",
        "        \n",
        "        print(f'Fetched data for User ID {user_id} ({idx + 1}/{len(user_ids)})')\n",
        "        \n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f'Error fetching data for User ID {user_id}: {e}')\n",
        "\n",
        "    # rate limiting\n",
        "    time.sleep(0.5)\n",
        "\n",
        "\n",
        "df = pd.DataFrame(all_user_data, columns=columns)\n",
        "\n",
        "df.to_csv('user_playtime_data.csv', index=False)\n",
        "\n",
        "print('Data collection complete. Saved to \"user_playtime_data.csv\"')\n"
      ],
      "id": "d03433cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# importing libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "\n",
        "import scipy.stats as stats\n",
        "import time\n",
        "import itertools\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "\n",
        "games_data = pd.read_csv(\"../data/steam_game_data.csv\")\n",
        "users_data = pd.read_csv(\"../data/user_playtime_data.csv\")\n",
        "reviews_data = pd.read_csv(\"../data/reviews.csv\")"
      ],
      "id": "17f2d621",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data Preparation\n",
        "\n",
        "\n",
        "The Steam library includes not only actively released games but also test builds, delisted content, and placeholders. A significant portion of the entries featured non-standard release indicators such as “Q2 2025” or “Coming soon,”.\n",
        "\n",
        "Entries with incomplete or ambiguous metadata were removed. Standardized formatting was applied to key fields, including release dates and platform tags, to produce a clean dataset suitable for reliable trend analysis.\n"
      ],
      "id": "613ebef6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Removing rows with any missing values\n",
        "games_data.dropna(inplace=True)\n",
        "\n",
        "# Attemptting to parse the dates with possible date formats : \n",
        "# Possible formats known from: https://steamcommunity.com/sharedfiles/filedetails/?id=2554483179#:~:text=Date%20part%20order%20can%20be,format%20will%20be%20applied%20immediately.\n",
        "\n",
        "valid_dates_format1 = pd.to_datetime(games_data['release_date'], format='%d %b, %Y', errors='coerce')\n",
        "valid_dates_format2 = pd.to_datetime(games_data['release_date'], format='%b %d, %Y', errors='coerce')\n",
        "valid_dates_format3 = pd.to_datetime(games_data['release_date'], format='%d %b %Y', errors='coerce')\n",
        "\n",
        "# Identify rows that do not match either of the formats\n",
        "invalid_dates = games_data[(valid_dates_format1.isna()) & (valid_dates_format2.isna()) & (valid_dates_format3.isna())]\n",
        "\n",
        "# let's remove those invalid dates\n",
        "invalid_dates_list = invalid_dates['release_date'].tolist()\n",
        "games_data = games_data[~games_data['release_date'].isin(invalid_dates_list)]\n",
        "\n",
        "\n",
        "# Combining all parsed dates\n",
        "games_data['release_date'] = valid_dates_format1.fillna(valid_dates_format2).fillna(valid_dates_format3)\n",
        "\n",
        "# Convert dates to 'YYYY-MM-DD' format for consistency only\n",
        "games_data['release_date'] = games_data['release_date'].dt.strftime('%Y-%m-%d')\n",
        "\n",
        "\n",
        "# Rename the column from 'appid' to 'game_id'\n",
        "users_data.rename(columns={'appid': 'game_id'}, inplace=True)\n",
        "\n",
        "# let's add avg_playtime coloumn - for viz\n",
        "users_data['avg_playtime'] = users_data['playtime_2weeks'] / 14\n",
        "\n",
        "# Convert playtime from minutes to hours\n",
        "users_data['playtime_2weeks'] = users_data['playtime_2weeks'] / 60\n",
        "users_data['playtime_forever'] = users_data['playtime_forever'] / 60"
      ],
      "id": "471660d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Engagement Levels"
      ],
      "id": "dbe4dcf3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "active_users = users_data[users_data['playtime_2weeks'] > 0]\n",
        "\n",
        "# calculate weekly playtime (in hours) for those active uses\n",
        "active_users['weekly_playtime_hours'] = (active_users['playtime_2weeks'] / 2)\n",
        "\n",
        "\n",
        "# visualization the  distribution of weekly playtime\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(active_users['weekly_playtime_hours'], bins=30, color='skyblue', edgecolor='black')\n",
        "plt.axvline(x=20, color='red', linestyle='--', label='Addiction Threshold (20 hours)')\n",
        "plt.xlabel('Average Weekly Playtime (Hours)')\n",
        "plt.ylabel('Number of Active Users')\n",
        "plt.title('Distribution of Weekly Playtime Among Active Users')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "3d18c298",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Lets also cateogrize active users based on weekly playtime\n",
        "def categorize_playtime(hours):\n",
        "    if hours < 7:\n",
        "        return 'Casual Gamer'\n",
        "    elif hours < 20:\n",
        "        return 'Moderate Gamer'\n",
        "    else:\n",
        "        return 'Potential Addiction'\n",
        "\n",
        "active_users['playtime_category'] = active_users['weekly_playtime_hours'].apply(categorize_playtime)\n",
        "\n",
        "# total active users in each category\n",
        "active_category_counts = active_users['playtime_category'].value_counts()\n",
        "\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.pie(active_category_counts, labels=active_category_counts.index, autopct='%1.1f%%', startangle=140, colors=['#66c2a5', '#fc8d62', '#8da0cb'])\n",
        "plt.title('Active User Distribution by Playtime Category')\n",
        "plt.show()\n"
      ],
      "id": "c6bbe9ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "When analyzing active user behavior, it turns out most people aren't glued to their screens for hours on end.\n",
        "\n",
        "In fact, 75.4% of users are casual gamers, playing for less than 7 hours a week. This group makes up the overwhelming majority, indicating that for most users, gaming is a light and occasional pastime.\n",
        "\n",
        "Another 17.9% fall into the moderate gamer category, playing between 7 to 20 hours per week. This suggests a healthy level of interest, frequent enough to show engagement, but not so much that it takes over their weekly schedule.\n",
        "\n",
        "Only 6.6% of users exceed 20 hours of playtime per week, which may point to a possible risk of gaming addiction. However, this small percentage suggests that excessive gaming behavior isn’t widespread in this dataset.\n",
        "\n",
        "A closer look at the playtime distribution reveals a long tail, a small number of users play for 40+ hours per week. These outliers might be worth exploring further, but overall, they don’t represent the norm.\n",
        "\n",
        "So what does all of this tell us? Most people play games casually. A smaller group plays regularly, but still within a reasonable range. Very few exhibit playtime that raises concerns about overuse.\n",
        "\n",
        "This paints a picture of gaming as something people enjoy in moderation, not as a widespread addictive behavior.\n",
        "\n",
        "\n",
        "\n",
        "## What drives players to keep playing?"
      ],
      "id": "11ab6055"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Merging user_data with games_data on game_id\n",
        "merged_data = users_data.merge(games_data, on='game_id', how='left')\n",
        "merged_data.dropna(inplace=True)\n",
        "\n",
        "\n",
        "merged_data = merged_data[merged_data['playtime_2weeks'] > 0]\n",
        "\n",
        "\n",
        "merged_data['multiplayer_support'] = merged_data['multiplayer_support'].astype(int)\n",
        "\n",
        "\n",
        "# game design elements for analysis\n",
        "design_elements = [\"DLC_count\", \"multiplayer_support\", \"max_concurrent_players\", \"average_review_score\"]\n",
        "\n",
        "\n",
        "merged_data['playtime_forever'] = np.log1p(merged_data['playtime_forever'])\n",
        "merged_data['DLC_count'] = np.log1p(merged_data['DLC_count'])\n",
        "merged_data['max_concurrent_players'] = np.log1p(merged_data['max_concurrent_players'])\n",
        "merged_data['average_review_score'] = np.log1p(merged_data['average_review_score'])\n",
        "merged_data['playtime_2weeks'] = np.log1p(merged_data['playtime_2weeks'])\n",
        "\n",
        "correlation_results = merged_data[[\"playtime_forever\"] + design_elements].corr()\n",
        "\n",
        "\n",
        "# heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(correlation_results, annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n",
        "plt.title(\"Correlation Between Game Design Elements and Playtime\")\n",
        "plt.show()"
      ],
      "id": "68e38112",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "hypothesis test"
      ],
      "id": "ba8b8896"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#hyopthesis testing\n",
        "import pandas as pd\n",
        "from scipy.stats import chi2_contingency\n",
        "\n",
        "merged_data = users_data.merge(games_data, on='game_id', how='left')\n",
        "merged_data.dropna(inplace=True)\n",
        "\n",
        "merged_data = merged_data[merged_data['playtime_2weeks'] > 0]\n",
        "merged_data['multiplayer_support'] = merged_data['multiplayer_support'].astype(int)\n",
        "\n",
        "\n",
        "df_filtered = merged_data[merged_data['playtime_2weeks'] > 0].copy()\n",
        "\n",
        "# Create addicted column: 1 if playtime_2weeks > 20, else 0\n",
        "df_filtered['addicted'] = (df_filtered['playtime_2weeks'] > 40).astype(int)\n",
        "\n",
        "# Create contingency table between multiplayer_support and addicted status\n",
        "contingency_table = pd.crosstab(df_filtered['multiplayer_support'], df_filtered['addicted'])\n",
        "\n",
        "print(\"Contingency Table:\")\n",
        "print(contingency_table)\n",
        "\n",
        "# Perform the chi-square test\n",
        "chi2, p, dof, expected = chi2_contingency(contingency_table)\n",
        "print(f\"\\nChi-square Statistic: {chi2:.4f}\")\n",
        "print(f\"Degrees of Freedom: {dof}\")\n",
        "print(f\"P-value: {p}\")\n",
        "\n",
        "\n",
        "prop_df = df_filtered.groupby('multiplayer_support')['addicted'].mean().reset_index()\n",
        "prop_df['Game Type'] = prop_df['multiplayer_support'].map({0: 'Single-player', 1: 'Multiplayer'})\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(x='Game Type', y='addicted', data=prop_df)\n",
        "plt.ylabel(\"Proportion of Addicted Players\")\n",
        "plt.title(\"Proportion of Addicted Players by Game Type\")\n",
        "\n",
        "plt.ylim(0, 0.3) \n",
        "plt.show()"
      ],
      "id": "75eb9590",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "other tests"
      ],
      "id": "9e399aee"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.stats import chi2_contingency\n",
        "from scipy.stats import ttest_ind\n",
        "\n",
        "\n",
        "merged_data = users_data.merge(games_data, on='game_id', how='left')\n",
        "merged_data.dropna(inplace=True)\n",
        "\n",
        "merged_data = merged_data[merged_data['playtime_2weeks'] > 0]\n",
        "\n",
        "merged_data['multiplayer_support'] = merged_data['multiplayer_support'].astype(int)\n",
        "\n",
        "\n",
        "# Assume df_filtered is defined as before with an 'addicted' column\n",
        "df_filtered = merged_data[merged_data['playtime_2weeks'] > 0].copy()\n",
        "df_filtered['addicted'] = (df_filtered['playtime_2weeks'] > 40).astype(int)\n",
        "\n",
        "# Define groups\n",
        "group_addicted = df_filtered[df_filtered['addicted'] == 1]\n",
        "group_non_addicted = df_filtered[df_filtered['addicted'] == 0]\n",
        "\n",
        "# Function to run and print t-test results for a given predictor\n",
        "def run_ttest(predictor):\n",
        "    t_stat, p_value = ttest_ind(group_addicted[predictor], group_non_addicted[predictor], nan_policy='omit')\n",
        "    print(f\"T-test for {predictor}:\")\n",
        "    print(f\"  t-statistic: {t_stat:.4f}\")\n",
        "    print(f\"  p-value: {p_value:.4f}\\n\")\n",
        "\n",
        "# Run t-tests for each predictor\n",
        "run_ttest('DLC_count')\n",
        "run_ttest('max_concurrent_players')\n",
        "run_ttest('average_review_score')"
      ],
      "id": "3686974e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Q3"
      ],
      "id": "d4dc5a8c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy.stats import pearsonr\n",
        "\n",
        "\n",
        "# Merge user data with game data\n",
        "merged_data = users_data.merge(games_data, on=\"game_id\", how=\"inner\")\n",
        "\n",
        "merged_data = merged_data[merged_data['playtime_2weeks'] > 40]\n",
        "\n",
        "genre_playtime = merged_data.groupby(\"genre\")[\"playtime_2weeks\"].sum().sort_values(ascending=False)\n",
        "\n",
        "# Plot genre vs. total playtime\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(x=genre_playtime.index[:10], y=genre_playtime.values[:10])\n",
        "plt.xticks(rotation=30, ha=\"right\")  # Rotating labels for better readability\n",
        "plt.xlabel(\"Game Genre\")\n",
        "plt.ylabel(\"Total Playtime (hours)\")\n",
        "plt.title(\"Top 10 Most Engaging Game Genres for addicted users by Playtime\")\n",
        "plt.tight_layout()  # Adjust layout to prevent clipping\n",
        "plt.show()\n",
        "\n",
        "addiction_correlation, _ = pearsonr(merged_data[\"playtime_forever\"], merged_data[\"average_review_score\"])"
      ],
      "id": "d952ae0c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy.stats import pearsonr\n",
        "\n",
        "\n",
        "# Merge user data with game data\n",
        "merged_data = users_data.merge(games_data, on=\"game_id\", how=\"inner\")\n",
        "\n",
        "merged_data = merged_data[merged_data['playtime_2weeks'] > 0]\n",
        "\n",
        "merged_data = merged_data[merged_data['playtime_2weeks'] < 40]\n",
        "\n",
        "genre_playtime = merged_data.groupby(\"genre\")[\"playtime_2weeks\"].sum().sort_values(ascending=False)\n",
        "\n",
        "# Plot genre vs. total playtime\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(x=genre_playtime.index[:10], y=genre_playtime.values[:10])\n",
        "plt.xticks(rotation=30, ha=\"right\")  # Rotating labels for better readability\n",
        "plt.xlabel(\"Game Genre\")\n",
        "plt.ylabel(\"Total Playtime (hours)\")\n",
        "plt.title(\"Top 10 Most Engaging Game Genres for non-addicted users by Playtime\")\n",
        "plt.tight_layout()  # Adjust layout to prevent clipping\n",
        "plt.show()\n",
        "\n",
        "addiction_correlation, _ = pearsonr(merged_data[\"playtime_forever\"], merged_data[\"average_review_score\"])\n"
      ],
      "id": "3d42c840",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heading"
      ],
      "id": "b27ec906"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heading"
      ],
      "id": "e73f8b0a"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heading"
      ],
      "id": "b9de0cb9"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here's an example of citing a source [see @phil99, pp. 33-35]. Be sure the source information is entered in \"BibTeX\" form in the `references.bib` file.\n",
        "\n",
        "\n",
        "The bibliography will automatically be generated, listing all sources in the `.bib` file."
      ],
      "id": "705a0113"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/bijayadhikari/anaconda3/envs/capstone/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}